{"version":3,"sources":["ContactFrom/ContactForm.styles.jsx","ContactFrom/ContactForm.jsx","Contacts/Contacts.styles.jsx","Contacts/Contacts.jsx","Container/Container.styles.jsx","Container/Container.jsx","Filter/Filter.styles.jsx","Filter/Filter.jsx","App.jsx","index.js"],"names":["Title2","styled","h2","Input","input","Button","button","ContactFrom","onSubmit","useState","name","setName","number","setNumber","nameInputId","uuidv4","numberInputId","handleChange","e","target","value","reset","preventDefault","htmlFor","type","placeholder","onChange","id","autoComplete","pattern","title","required","disabled","Contact","ul","ContactItem","li","BtnDelete","Text","p","ContactList","contacts","onDeleteContact","map","onClick","Containers","div","Title","h1","Container","children","Filter","App","JSON","parse","localStorage","getItem","ContactsJson","setContacts","filter","setFilter","isFirstRender","useRef","useEffect","current","parsedContacts","setItem","stringify","contact","some","alert","currentTarget","length","normalizedFilter","toLowerCase","includes","getVisibleContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1853986.chunk.js","sourcesContent":["import styled from '@emotion/styled'\r\n\r\nexport const Title2 = styled.h2`\r\nfont-size: 17px;\r\nfont-weight: 500;\r\nmargin: 0;\r\njustify-content:center;\r\npadding-bottom: 10px;\r\n`\r\n\r\nexport const Input = styled.input`\r\nmin-width:350px;\r\ndisplay: flex;\r\npadding:5px;\r\nmargin-bottom: 20px;\r\ncursor: pointer;\r\nborder:  solid 1.5px #6b6a6a4c;\r\nborder-radius:5px;\r\n\r\n&:hover{\r\n    border:  solid 1.5px #09c3e4;\r\n    box-shadow: 0 0 20px rgba(20, 247, 247, 0.5);\r\n}`\r\n\r\nexport const Button = styled.button`\r\npadding: 5px;\r\nborder:  solid 1.5px #6b6a6a4c;\r\nborder-radius:5px;\r\n\r\n&:hover{\r\n    color: #09c3e4;\r\n    border:  solid 1.5px #09c3e4;\r\n    box-shadow: 0 0 20px rgba(20, 247, 247, 0.5); \r\n}\r\n`","import PropTypes from 'prop-types'\r\nimport { useState } from 'react';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport {Input, Title2,Button} from './ContactForm.styles'\r\nimport {BiPhoneCall, BiUser,BiAddToQueue} from 'react-icons/bi'\r\n\r\nexport default function ContactFrom({onSubmit}) {\r\n const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n  \r\n  const nameInputId = uuidv4();\r\n  const numberInputId = uuidv4();\r\n\r\n  const handleChange = e => {\r\n\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case 'name' :\r\n        setName(value);\r\n        break;\r\n      \r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      \r\n      default: return;\r\n    }\r\n   }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    onSubmit(name, number);\r\n\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName(\"\")\r\n    setNumber(\"\")\r\n  }\r\n\r\n    return (\r\n\r\n          <form onSubmit={handleSubmit}>\r\n           \r\n                <Title2 htmlFor={nameInputId}><BiUser/> Name</Title2>\r\n\r\n                <Input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Enter your name\"\r\n                onChange={handleChange}\r\n                value={name}\r\n                id={nameInputId}\r\n                autoComplete='all'\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. \r\n                Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n                />\r\n\r\n                <Title2 htmlFor={numberInputId}><BiPhoneCall/> Number </Title2>\r\n\r\n                <Input\r\n                type=\"text\"\r\n                name=\"number\"\r\n                placeholder=\"Enter your number\"\r\n                autoComplete='all'\r\n                onChange={handleChange}\r\n                value={number}\r\n                id={numberInputId}\r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять из цифр и может содержать пробелы,\r\n                тире, круглые скобки и может начинаться с +\"\r\n                required\r\n                />\r\n                <Button type=\"submit\"  disabled={!name || !number}>\r\n                <BiAddToQueue />\r\n                  Add contact\r\n                </Button>\r\n              </form>\r\n  )\r\n}\r\n\r\n  ContactFrom.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n}","import styled from '@emotion/styled'\r\n\r\nexport const Contact = styled.ul`\r\nwidth: 350px;\r\npadding: 0;\r\n`\r\n\r\nexport const ContactItem = styled.li`\r\ndisplay: flex;\r\ntext-align:center;\r\nalign-items:center;\r\njustify-content: space-between;\r\n`\r\n\r\nexport const BtnDelete = styled.button`\r\nwidth: 40px;\r\nheight: 40px;\r\nborder: solid 1.5px #6b6a6a4c;\r\nborder-radius: 50%;\r\npadding: 3px;\r\n\r\n&:hover{\r\n    color: #09c3e4;\r\n    border:  solid 1.5px #09c3e4;\r\n    box-shadow: 0 0 20px rgba(20, 247, 247, 0.5);}\r\n\r\n`\r\n\r\nexport const Text = styled.p`\r\nfont-size: 17px;\r\nfont-weight:400;\r\n`\r\n","import PropTypes from \"prop-types\";\r\nimport { Contact, ContactItem, BtnDelete, Text } from './Contacts.styles';\r\nimport {RiDeleteBin5Line, RiUserHeartLine} from 'react-icons/ri';\r\n\r\nconst ContactList = ({contacts, onDeleteContact}) => (\r\n        <Contact>\r\n          {contacts.map(({id,name,number}) => (\r\n            <ContactItem key={id}><RiUserHeartLine/>\r\n            <Text>{name}: {number}</Text>\r\n            <BtnDelete onClick = {() => onDeleteContact(id)}><RiDeleteBin5Line/></BtnDelete>\r\n            </ContactItem>\r\n          ))}\r\n        </Contact>\r\n  )\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nexport default ContactList;","import styled from '@emotion/styled'\r\n\r\nexport const Containers = styled.div`\r\n  max-width: 500px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding: 40px 40px;\r\n  background-color: #eff7f895;\r\n  border-radius: 5px;\r\n\r\n  &:hover{\r\n      box-shadow: 0px 0px 5px  rgba(20, 247, 247, 0.5);\r\n  }\r\n`\r\n\r\nexport const Title = styled.h1`\r\n  text-align: center;\r\n  color: #000;\r\n  font-weight: bold;\r\n  font-size: 42px;\r\n`","import PropTypes from \"prop-types\";\r\nimport { Containers, Title } from \"./Container.styles\";\r\nimport {BiBookOpen} from 'react-icons/bi';\r\n\r\nconst Container = ({ title, children }) => (\r\n  <Containers>\r\n    <Title> <BiBookOpen/> {title}</Title>\r\n    {children}\r\n  </Containers>\r\n);\r\n\r\nContainer.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Container;","import styled from '@emotion/styled'\r\n\r\nexport const Text = styled.p`\r\nfont-size:20px;\r\n`","import PropTypes from \"prop-types\";\r\nimport { Input } from '../ContactFrom/ContactForm.styles';\r\nimport { Text } from './Filter.styles';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n    return (\r\n        <>\r\n        <Text>Find contacts by name</Text>\r\n            <Input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Name to search\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                value={value}\r\n                onChange={onChange}\r\n                required>  \r\n            </Input>\r\n        </>\r\n    )\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import { useState, useEffect, useRef} from 'react'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport ContactsJson from './data/contacts.json'\r\nimport ContactForm  from './ContactFrom';\r\nimport ContactList from './Contacts';\r\nimport Container from './Container';\r\nimport Filter from './Filter';\r\nimport {RiContactsLine} from 'react-icons/ri';\r\n\r\n\r\nexport default function App() { \r\nconst [contacts, setContacts] = useState(() => {\r\n    return JSON.parse(localStorage.getItem('contacts')) ?? ContactsJson\r\n  });\r\n\r\n  const [filter, setFilter] = useState('');\r\n  const isFirstRender = useRef(true)\r\n\r\n  useEffect(() => {\r\n    if (isFirstRender.current) {\r\n      const parsedContacts = JSON.parse(localStorage.getItem('contacts'))\r\n\r\n      if (parsedContacts) {\r\n        setContacts(parsedContacts)\r\n      }\r\n      isFirstRender.current = false\r\n      return\r\n    }\r\n    localStorage.setItem ('contacts', JSON.stringify(contacts))\r\n  }, [contacts]);\r\n\r\n  const formSubmitHandle = (name, number) => {\r\n    const contact = {\r\n      id: uuidv4(),\r\n      name,\r\n      number,\r\n    };\r\n\r\n    if (contacts.some((contact) => contact.name === name)) {\r\n      alert(`${name} is already in contacts.`);\r\n      return;\r\n    }\r\n\r\n      setContacts((contacts) => [contact, ...contacts])\r\n  }\r\n\r\n  const changeFilter = (e) => {\r\n    setFilter(e.currentTarget.value);\r\n  };\r\n    \r\n\r\n  const getVisibleContacts = () => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    )\r\n  }\r\n  \r\n    \r\n  const deleteContact = (contactId) => {\r\n     setContacts(contacts.filter((contact) => contact.id !== contactId))\r\n    }\r\n\r\n  return (\r\n    <Container title='Phonebook'>\r\n      <ContactForm onSubmit={formSubmitHandle}></ContactForm>\r\n      <h2> <RiContactsLine /> Contacts</h2>\r\n      <Filter value={filter} onChange={changeFilter}></Filter>\r\n\r\n      {contacts.length > 0 && (\r\n         <ContactList contacts={getVisibleContacts()} onDeleteContact={deleteContact}></ContactList>\r\n      )}\r\n     \r\n    </Container>\r\n  )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}